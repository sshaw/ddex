require "bundler/gem_tasks"
require "rspec/core/rake_task"
require "tmpdir"
require "pp"

require "ddex"

RSpec::Core::RakeTask.new(:spec)

task :default => "spec"

desc "call DDEX.read on file given by FILE and write it to a new file via DDEX.write"
task :to_xml do |t|
  abort "usage: #{t.name} FILE=path/ddex/file.xml" unless ENV["FILE"]

  ext = File.extname(ENV["FILE"])
  out = File.basename(ENV["FILE"], ext)
  out << ".out"
  out << ext unless ext.empty?

  doc = DDEX.write(DDEX.read(ENV["FILE"]))

  puts "Saving output to #{out}"
  File.write(out, doc)
end

desc "call DDEX.read on the file given by FILE and print its Hash representation"
task :to_hash do |t|
  abort "usage: #{t.name} FILE=path/ddex/file.xml" unless ENV["FILE"]

  pp DDEX.read(ENV["FILE"]).to_hash
end

desc "Generate code from the schema given by SCHEMA"
task :generate do
  schema = ENV["SCHEMA"]
  output = File.join(Dir.tmpdir, "ddex-schema-#{Time.now.to_i}")

  abort "code generation requires JRuby" unless RUBY_PLATFORM == "java"
  abort "usage: rake generate SCHEMA=schema.xsd" unless schema

  sh "jaxb2ruby -o #{output} -I etc -t etc/ddex.erb -n etc/namespaces.yml #{schema}" do |ok, rv|
    abort "code generation failed (#{rv.exitstatus})" unless ok
  end

  puts "Files output to #{output}"
  puts "REMEMBER: for ERN < v4 you'll need to modify RelatedReleaseOfferSet:", <<-DEAL
    # remove this require:
    require "ddex/ern/vXX/deal"

    # and forward declare Deal
    class Deal < Element; include ROXML end
  DEAL
end

%w[ern].each do |spec|
  root = File.expand_path("../etc/schemas/#{spec}", __FILE__)
  Dir.entries(root).each do |dir|
    next if dir == "." or dir == ".."
    # Ignore patch version
    schema = dir[0..2].to_i < 34 ? "ern-main.xsd" : "release-notification.xsd"
    schema = File.join(root, dir, schema)

    desc "Validate the instance doc given by FILE against #{spec} v#{dir}"
    task "validate:#{spec}#{dir}" do
      abort "missing FILE argument" unless ENV["FILE"]
      # Empty block to silence the stack trace, that aside, we do want verboseness
      sh "xmllint --noout --schema #{schema} #{ENV["FILE"]}" do end
    end
  end
end

desc "List currently generated versions"
task :versions do
  # Maybe better to use a method on DDEX...
  root  = File.expand_path("../lib/ddex", __FILE__)
  specs = Dir.glob("#{root}/*").select { |path| File.directory?(path) }
  specs.each do |spec|
    puts "#{File.basename(spec)}: "
    versions = Dir.glob(File.join(spec, "*")).select { |path| File.directory?(path) }
    versions.each { |version| puts "  #{File.basename(version)}" }
  end
end

namespace :generate do
  desc "Create a 'main' file to load the given spec and version"
  task :main, :name, :version do |t, args|
    name = args[:name]
    ver  = args[:version]
    abort "usage: generate:main[name, version]" unless name and ver

    puts <<MAIN
#
# Do not edit. Automatically generated by `rake generate:main`.
#
module DDEX
  module #{name.upcase}
    module V#{ver.upcase.tr(".", "")}
      extend DDEX
      require_standard("#{name}", "#{ver}")
    end
  end
end
MAIN
  end
end
